[
  {
    "docs": {
      "lambda": {
        "isPrimop": false,
        "position": {
          "file": "test_data/assets/strings.nix",
          "line": 84,
          "column": 25
        },
        "content": "\n    Map a function over a list and concatenate the resulting strings.\n\n    # Example\n\n    ```nix\n    concatMapStrings (x: \"a\" + x) [\"foo\" \"bar\"]\n    => \"afooabar\"\n    ```\n\n    # Type\n\n    ```\n    concatMapStrings :: (a -> string) -> [a] -> string\n    ```\n\n    # Arguments\n\n    - [f] \n    - [list] \n\n  ",
        "countApplied": 1
      },
      "attr": {
        "position": {
          "file": "test_data/assets/strings.nix",
          "line": 243,
          "column": 3
        },
        "content": "\n    Concatenate a list of strings, adding a newline at the end of each one.\n    Defined as `concatMapStrings (s: s + \"\\n\")`.\n\n    # Example\n\n    ```nix\n    concatLines [ \"foo\" \"bar\" ]\n    => \"foo\\nbar\\n\"\n    ```\n\n    # Type\n\n    ```\n    concatLines :: [string] -> string\n    ```\n  "
      }
    },
    "aliases": [],
    "path": [
      "lib",
      "strings",
      "concatLines"
    ]
  },
  {
    "docs": {
      "lambda": {
        "isPrimop": false,
        "position": {
          "file": "test_data/assets/strings.nix",
          "line": 84,
          "column": 25
        },
        "content": "\n    Map a function over a list and concatenate the resulting strings.\n\n    # Example\n\n    ```nix\n    concatMapStrings (x: \"a\" + x) [\"foo\" \"bar\"]\n    => \"afooabar\"\n    ```\n\n    # Type\n\n    ```\n    concatMapStrings :: (a -> string) -> [a] -> string\n    ```\n\n    # Arguments\n\n    - [f] \n    - [list] \n\n  ",
        "countApplied": 1
      },
      "attr": {
        "position": {
          "file": "test_data/assets/default.nix",
          "line": 98,
          "column": 27
        },
        "content": null
      }
    },
    "aliases": [],
    "path": [
      "lib",
      "concatLines"
    ]
  }
]